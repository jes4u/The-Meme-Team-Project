df <- data.frame(Type, Subjective, Objective)
rownames(df) <- df[,1]
df[,1] <- NULL
}
source('./dm.r')
getJungian <- function(pred_df, int_df){
personality <- as.character(interpretations[1, "value"])
personality_split <- strsplit(personality, "")[[1]]
if(identical(personality_split[1], "I")){
personality_1 <- "Introverted"
} else {
personality_1 <- "Extroverted"
}
if(identical(personality_split[2], "N")){
personality_2 <- "Intuitive"
} else {
personality_2 <- "Sensible"
}
if(identical(personality_split[3], "T")){
personality_3  <- "Thinker"
} else {
personality_3 <- "Feeler"
}
if(identical(personality_split[4], "J")){
personality_4 <- "Judger"
} else {
personality_4 <- "Perceptive"
}
Type <- c("Deductive", "Inductive")
Subjective <- c(personality_2, personality_3)
Objective <- c(personality_1, personality_4)
df <- data.frame(Type, Subjective, Objective)
rownames(df) <- df[,1]
df[,1] <- NULL
return(df)
}
getJungian("a", "b")
getJungian(GetPredDF(GetData("@realDonaldTrump")), GetIntDF(GetData("@realDonaldTrump")))
source('./getData.r')
source('./dm.r')
getJungian <- function(pred_df, int_df){
personality <- as.character(interpretations[1, "value"])
personality_split <- strsplit(personality, "")[[1]]
if(identical(personality_split[1], "I")){
personality_1 <- "Introverted"
} else {
personality_1 <- "Extroverted"
}
if(identical(personality_split[2], "N")){
personality_2 <- "Intuitive"
} else {
personality_2 <- "Sensible"
}
if(identical(personality_split[3], "T")){
personality_3  <- "Thinker"
} else {
personality_3 <- "Feeler"
}
if(identical(personality_split[4], "J")){
personality_4 <- "Judger"
} else {
personality_4 <- "Perceptive"
}
Type <- c("Deductive", "Inductive")
Subjective <- c(personality_2, personality_3)
Objective <- c(personality_1, personality_4)
df <- data.frame(Type, Subjective, Objective)
rownames(df) <- df[,1]
df[,1] <- NULL
return(df)
}
getJungian(GetPredDF(GetData("@realDonaldTrump")), GetIntDF(GetData("@realDonaldTrump")))
source('./getData.r')
source('./dm.r')
getJungian <- function(interpretations){
personality <- as.character(interpretations[1, "value"])
personality_split <- strsplit(personality, "")[[1]]
if(identical(personality_split[1], "I")){
personality_1 <- "Introverted"
} else {
personality_1 <- "Extroverted"
}
if(identical(personality_split[2], "N")){
personality_2 <- "Intuitive"
} else {
personality_2 <- "Sensible"
}
if(identical(personality_split[3], "T")){
personality_3  <- "Thinker"
} else {
personality_3 <- "Feeler"
}
if(identical(personality_split[4], "J")){
personality_4 <- "Judger"
} else {
personality_4 <- "Perceptive"
}
Type <- c("Deductive", "Inductive")
Subjective <- c(personality_2, personality_3)
Objective <- c(personality_1, personality_4)
df <- data.frame(Type, Subjective, Objective)
rownames(df) <- df[,1]
df[,1] <- NULL
return(df)
}
getJungian(GetIntDF(GetData("@realDonaldTrump")))
df <- getJungian(GetIntDF(GetData("@realDonaldTrump")))
df
getJungian <- function(t_handle){
interpretations <- GetIntDF(GetData("@realDonaldTrump"))
personality <- as.character(interpretations[1, "value"])
personality_split <- strsplit(personality, "")[[1]]
if(identical(personality_split[1], "I")){
personality_1 <- "Introverted"
} else {
personality_1 <- "Extroverted"
}
if(identical(personality_split[2], "N")){
personality_2 <- "Intuitive"
} else {
personality_2 <- "Sensible"
}
if(identical(personality_split[3], "T")){
personality_3  <- "Thinker"
} else {
personality_3 <- "Feeler"
}
if(identical(personality_split[4], "J")){
personality_4 <- "Judger"
} else {
personality_4 <- "Perceptive"
}
Type <- c("Deductive", "Inductive")
Subjective <- c(personality_2, personality_3)
Objective <- c(personality_1, personality_4)
df <- data.frame(Type, Subjective, Objective)
rownames(df) <- df[,1]
df[,1] <- NULL
return(df)
}
df <- getJungian("@realDonaldTrump")
df
df
df <- getJungian("@realDonaldTrump")
df
source('./getData.r')
source('./dm.r')
getJungian <- function(t_handle){
interpretations <- GetIntDF(GetData(t_handle))
personality <- as.character(interpretations[1, "value"])
personality_split <- strsplit(personality, "")[[1]]
if(identical(personality_split[1], "I")){
personality_1 <- "Introverted"
} else {
personality_1 <- "Extroverted"
}
if(identical(personality_split[2], "N")){
personality_2 <- "Intuitive"
} else {
personality_2 <- "Sensible"
}
if(identical(personality_split[3], "T")){
personality_3  <- "Thinker"
} else {
personality_3 <- "Feeler"
}
if(identical(personality_split[4], "J")){
personality_4 <- "Judger"
} else {
personality_4 <- "Perceptive"
}
Type <- c("Deductive", "Inductive")
Subjective <- c(personality_2, personality_3)
Objective <- c(personality_1, personality_4)
df <- data.frame(Type, Subjective, Objective)
rownames(df) <- df[,1]
df[,1] <- NULL
return(df)
}
source('./getData.r')
source('./dm.r')
getJungian <- function(t_handle){
interpretations <- GetIntDF(GetData(t_handle))
personality <- as.character(interpretations[1, "value"])
personality_split <- strsplit(personality, "")[[1]]
if(identical(personality_split[1], "I")){
personality_1 <- "Introverted"
} else {
personality_1 <- "Extroverted"
}
if(identical(personality_split[2], "N")){
personality_2 <- "Intuitive"
} else {
personality_2 <- "Sensible"
}
if(identical(personality_split[3], "T")){
personality_3  <- "Thinker"
} else {
personality_3 <- "Feeler"
}
if(identical(personality_split[4], "J")){
personality_4 <- "Judger"
} else {
personality_4 <- "Perceptive"
}
Type <- c("Deductive", "Inductive")
Subjective <- c(personality_2, personality_3)
Objective <- c(personality_1, personality_4)
df <- data.frame(Type, Subjective, Objective)
rownames(df) <- df[,1]
df[,1] <- NULL
return(df)
}
df <- getJungian("@realDonaldTrump")
df
getWordMap("@realDonaldTrump")
getWordMap("@realDonaldTrump")
source('./getData.r')
library(dplyr)
library(wordcloud)
library(randomcoloR)
getWordMap <- function(user) {
shorten_tweet <- substr(GetTweets(user), start = 0, stop = 10000)
cloud <- wordcloud(words=shorten_tweet, scale=c(4,.5), min.freq = 1, max.words = Inf, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE, colors=randomColor())
return(cloud)
}
getWordMap("@realDonaldTrump")
source('./getData.r')
library(wordcloud)
library(randomcoloR)
library(RColorBrewer)
library(tm)
getWordMap <- function(user) {
shorten_tweet <- substr(GetTweets(user), start = 0, stop = 10000)
cloud <- wordcloud(words=shorten_tweet,
scale=c(4,.5),
min.freq = 1,
max.words = Inf,
random.order=FALSE,
rot.per=0.35,
use.r.layout=FALSE,
colors=randomColor()
)
return(cloud)
}
getWordMap("@realDonaldTrump")
t_api_key <- "RIXgPEn59oOUm2qn5WBQX2sW1"
t_api_secret <- "70qPb7pp7mQCOjRPU3jP7kxhu4N91vavVupBvih08Bp3aHrkXN"
t_access_token <- "4081108513-Lj3BaXetniCt09A1uvn4U5YFZGSM1JQHiyapjfq"
t_access_token_secret <- "S1YtKDOJIXDj2ARejfFv3tbx8OmBVFUHgStiCoLBdwOGr"
setup_twitter_oauth(t_api_key,
t_api_secret,
t_access_token,
t_access_token_secret)
source('./getData.r')
library(wordcloud)
library(randomcoloR)
library(RColorBrewer)
library(tm)
getWordMap <- function(user) {
shorten_tweet <- substr(GetTweets(user), start = 0, stop = 10000)
cloud <- wordcloud(words=shorten_tweet,
scale=c(4,.5),
min.freq = 1,
max.words = Inf,
random.order=FALSE,
rot.per=0.35,
use.r.layout=FALSE,
colors=randomColor()
)
return(cloud)
}
source('./getData.r')
getJungian <- function(t_handle){
interpretations <- GetIntDF(GetData(t_handle))
personality <- as.character(interpretations[1, "value"])
personality_split <- strsplit(personality, "")[[1]]
if(identical(personality_split[1], "I")){
personality_1 <- "Introverted"
} else {
personality_1 <- "Extroverted"
}
if(identical(personality_split[2], "N")){
personality_2 <- "Intuitive"
} else {
personality_2 <- "Sensible"
}
if(identical(personality_split[3], "T")){
personality_3  <- "Thinker"
} else {
personality_3 <- "Feeler"
}
if(identical(personality_split[4], "J")){
personality_4 <- "Judger"
} else {
personality_4 <- "Perceptive"
}
Type <- c("Deductive", "Inductive")
Subjective <- c(personality_2, personality_3)
Objective <- c(personality_1, personality_4)
df <- data.frame(Type, Subjective, Objective)
rownames(df) <- df[,1]
df[,1] <- NULL
return(df)
}
getJungian("@realDonaldTrump")
getJungian("@realDonaldTrump")
library(jsonlite)
library(dplyr)
library(shiny)
library(httr)
library(devtools)
library(twitteR)
#Twitter#######################################################################
###Remove when finished###
t_api_key <- "RIXgPEn59oOUm2qn5WBQX2sW1"
t_api_secret <- "70qPb7pp7mQCOjRPU3jP7kxhu4N91vavVupBvih08Bp3aHrkXN"
t_access_token <- "4081108513-Lj3BaXetniCt09A1uvn4U5YFZGSM1JQHiyapjfq"
t_access_token_secret <- "S1YtKDOJIXDj2ARejfFv3tbx8OmBVFUHgStiCoLBdwOGr"
# setup_twitter_oauth(t_api_key,
#                     t_api_secret,
#                     t_access_token,
#                     t_access_token_secret)
#Get Tweets by twitter handle
GetTweets <- function(t_handle) {
t_user <- getUser(t_handle)
timeline <- userTimeline(t_user)
tweets <- c()
for (i in seq(length(timeline))) {
tweets <- c(tweets, timeline[[i]]$text)
}
return(toString(tweets))
}
#AMS###########################################################################
###Remove when finished###
ams_base <- "http://api-v2.applymagicsauce.com/"
ams_customer_id <- '2557'
ams_api_key <- 'hb2r82i8saloj1ectsfsi5omlq'
#Initial Auth
ams_auth_req <- POST(paste0(ams_base, "auth"),
add_headers("Content-Type"="application/json"),
body = '{"customer_id": 2557,
"api_key": "hb2r82i8saloj1ectsfsi5omlq"}')
if (ams_auth_req$status_code != 200) {
print("Bad key/id")
}
token <- content(ams_auth_req)$token
#Sends POST request to AMS
#Handles token regenation
#Takes auth token and concatenated tweets for a user as parameters
RequestAMS <- function(token='uuj6skmeji1km2ecodfv0nsptf', tweets) {
request <- POST(paste0(ams_base, "text?", "source=TWEET", "&interpretations=true"),
add_headers("X-Auth-Token"=token,
"Content-type"="application/json"),
body=tweets)
if (request$status_code == 403) {
###Redundant, find more elegant solution###
ams_auth_req <- POST(paste0(ams_base, "auth"),
add_headers("Content-Type"="application/json"),
body = '{"customer_id": 2557,
"api_key": "hb2r82i8saloj1ectsfsi5omlq"}')
if (ams_auth_req$status_code != 200) {
return("Bad key/id")
} else {
token <- content(ams_auth_req)$token
request <- RequestAMS(token, tweets)
}
}
return(request)
}
#Get data for a user
GetData <- function(user) {
tweets <- GetTweets(user)
resp <- RequestAMS(token, tweets)
return(content(resp))
}
#Get the shitty predictions df
GetPredDF <- function(data) {
return(as.data.frame(data$predictions))
}
#Get the shitty interpretations df
GetIntDF <- function(data) {
return(as.data.frame(data$interpretations))
}
getJungian("@realDonaldTrump")
t_api_key <- "RIXgPEn59oOUm2qn5WBQX2sW1"
t_api_secret <- "70qPb7pp7mQCOjRPU3jP7kxhu4N91vavVupBvih08Bp3aHrkXN"
t_access_token <- "4081108513-Lj3BaXetniCt09A1uvn4U5YFZGSM1JQHiyapjfq"
t_access_token_secret <- "S1YtKDOJIXDj2ARejfFv3tbx8OmBVFUHgStiCoLBdwOGr"
setup_twitter_oauth(t_api_key,
t_api_secret,
t_access_token,
t_access_token_secret)
source('./getData.r')
getJungian <- function(t_handle){
interpretations <- GetIntDF(GetData(t_handle))
personality <- as.character(interpretations[1, "value"])
personality_split <- strsplit(personality, "")[[1]]
if(identical(personality_split[1], "I")){
personality_1 <- "Introverted"
} else {
personality_1 <- "Extroverted"
}
if(identical(personality_split[2], "N")){
personality_2 <- "Intuitive"
} else {
personality_2 <- "Sensible"
}
if(identical(personality_split[3], "T")){
personality_3  <- "Thinker"
} else {
personality_3 <- "Feeler"
}
if(identical(personality_split[4], "J")){
personality_4 <- "Judger"
} else {
personality_4 <- "Perceptive"
}
Type <- c("Deductive", "Inductive")
Subjective <- c(personality_2, personality_3)
Objective <- c(personality_1, personality_4)
df <- data.frame(Type, Subjective, Objective)
rownames(df) <- df[,1]
df[,1] <- NULL
return(df)
}
getJungian("@realDonaldTrump")
t_api_key <- "RIXgPEn59oOUm2qn5WBQX2sW1"
t_api_secret <- "70qPb7pp7mQCOjRPU3jP7kxhu4N91vavVupBvih08Bp3aHrkXN"
t_access_token <- "4081108513-Lj3BaXetniCt09A1uvn4U5YFZGSM1JQHiyapjfq"
t_access_token_secret <- "S1YtKDOJIXDj2ARejfFv3tbx8OmBVFUHgStiCoLBdwOGr"
setup_twitter_oauth(t_api_key,
t_api_secret,
t_access_token,
t_access_token_secret)
library(jsonlite)
library(dplyr)
library(shiny)
library(httr)
library(devtools)
library(twitteR)
t_api_key <- "RIXgPEn59oOUm2qn5WBQX2sW1"
t_api_secret <- "70qPb7pp7mQCOjRPU3jP7kxhu4N91vavVupBvih08Bp3aHrkXN"
t_access_token <- "4081108513-Lj3BaXetniCt09A1uvn4U5YFZGSM1JQHiyapjfq"
t_access_token_secret <- "S1YtKDOJIXDj2ARejfFv3tbx8OmBVFUHgStiCoLBdwOGr"
setup_twitter_oauth(t_api_key,
t_api_secret,
t_access_token,
t_access_token_secret)
t_api_key <- "RIXgPEn59oOUm2qn5WBQX2sW1"
t_api_secret <- "70qPb7pp7mQCOjRPU3jP7kxhu4N91vavVupBvih08Bp3aHrkXN"
t_access_token <- "4081108513-Lj3BaXetniCt09A1uvn4U5YFZGSM1JQHiyapjfq"
t_access_token_secret <- "S1YtKDOJIXDj2ARejfFv3tbx8OmBVFUHgStiCoLBdwOGr"
setup_twitter_oauth(t_api_key,
t_api_secret,
t_access_token,
t_access_token_secret)
source('./getData.r')
library(wordcloud)
library(randomcoloR)
library(RColorBrewer)
library(tm)
getWordMap <- function(user) {
shorten_tweet <- substr(GetTweets(user), start = 0, stop = 10000)
cloud <- wordcloud(words=shorten_tweet,
scale=c(4,.5),
min.freq = 1,
max.words = Inf,
random.order=FALSE,
rot.per=0.35,
use.r.layout=FALSE,
colors=randomColor()
)
return(cloud)
}
getWordMap("@realDonaldTrump")
getWordMap("@realDonaldTrump")
getWordMap("@realDonaldTrump")
getWordMap("@realDonaldTrump")
library(jsonlite)
library(dplyr)
library(shiny)
library(httr)
library(devtools)
library(twitteR)
t_api_key <- "RIXgPEn59oOUm2qn5WBQX2sW1"
t_api_secret <- "70qPb7pp7mQCOjRPU3jP7kxhu4N91vavVupBvih08Bp3aHrkXN"
t_access_token <- "4081108513-Lj3BaXetniCt09A1uvn4U5YFZGSM1JQHiyapjfq"
t_access_token_secret <- "S1YtKDOJIXDj2ARejfFv3tbx8OmBVFUHgStiCoLBdwOGr"
setup_twitter_oauth(t_api_key,
t_api_secret,
t_access_token,
t_access_token_secret)
source('./getData.r')
library(wordcloud)
library(randomcoloR)
library(RColorBrewer)
library(tm)
getWordMap <- function(user) {
shorten_tweet <- substr(GetTweets(user), start = 0, stop = 10000)
cloud <- wordcloud(words=shorten_tweet,
scale=c(4,.5),
min.freq = 1,
max.words = Inf,
random.order=FALSE,
rot.per=0.35,
use.r.layout=FALSE,
colors=randomColor()
)
return(cloud)
}
getWordMap("@realDonaldTrump")
