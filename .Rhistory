<<<<<<< HEAD
movie.info <- GetReview(movie)
# Chunk 1
### Exercise 1 ###
library(jsonlite)
library(dplyr)
# Store a variable "movie"
movie <- "The Sandlot"
# Write a function that allows you to specify a movie, then does the following:
GetReview <- function(this.movie) {
# Replace all of the spaces in your movie title with plus signs (+)
movie.no.space <- gsub(' ', '+', this.movie)
# Construct a search query using YOUR api key
# The base URL is https://api.nytimes.com/svc/movies/v2/reviews/search.json?
# See the interactive console for more detail:https://developer.nytimes.com/movie_reviews_v2.json#/Console/GET/reviews/search.json
base <- 'https://api.nytimes.com/svc/movies/v2/reviews/search.json?'
api.key = 'api-key=28dc72f2e9b346648054e274ce556e48&'
query <- paste0('query=', movie.no.space)
search <- paste0(base, api.key, query)
# Request data using your search query
movie_data <- fromJSON(search)
# Flatten the data stored in the `$results` key of the data returned to you
flat_movie <- flatten(movie_data$results)
# From the most recent review, store the headline, short summary, and link to full article each in their own variables
headline <- flatGuy$headline
summary <- flatGuy$summary_short
link <- flatGuy$link.url
# Return an list of the three pieces of information from above
return(list(headline, summary, link))
}
# Create a variable called `movie.info` by passing your movie to your GetReview function
movie.info <- GetReview(movie)
# Chunk 1
### Exercise 1 ###
=======
library(shiny)
library(httr)
library(devtools)
library(twitteR)
########################################################################################################## In server
#Twitter#######################################################################
##Remove when finished###
t_api_key <- "RIXgPEn59oOUm2qn5WBQX2sW1"
t_api_secret <- "70qPb7pp7mQCOjRPU3jP7kxhu4N91vavVupBvih08Bp3aHrkXN"
t_access_token <- "4081108513-Lj3BaXetniCt09A1uvn4U5YFZGSM1JQHiyapjfq"
t_access_token_secret <- "S1YtKDOJIXDj2ARejfFv3tbx8OmBVFUHgStiCoLBdwOGr"
# ########### Comment out
# setup_twitter_oauth(t_api_key,
#                     t_api_secret,
#                     t_access_token,
#                     t_access_token_secret)
#
# #AMS###########################################################################
#
###Remove when finished###
ams_base <- "http://api-v2.applymagicsauce.com/"
ams_customer_id <- '2557'
ams_api_key <- 'hb2r82i8saloj1ectsfsi5omlq'
#Initial Auth
ams_auth_req <- POST(paste0(ams_base, "auth"),
add_headers("Content-Type"="application/json"),
body = '{"customer_id": 2557,
"api_key": "hb2r82i8saloj1ectsfsi5omlq"}')
if (ams_auth_req$status_code != 200) {
print("Bad key/id")
}
#################################################################################################### In server
# request_token
token <- content(ams_auth_req)$token
#Sends POST request to AMS
#Handles token regenation
#Takes auth token and concatenated tweets for a user as parameters
RequestAMS <- function(token='uuj6skmeji1km2ecodfv0nsptf', tweets) {
request <- POST(paste0(ams_base, "text?", "source=TWEET", "&interpretations=true"),
add_headers("X-Auth-Token"=token,
"Content-type"="application/json"),
body=tweets)
if (request$status_code == 403) {
###Redundant, find more elegant solution###
ams_auth_req <- POST(paste0(ams_base, "auth"),
add_headers("Content-Type"="application/json"),
body = '{"customer_id": 2557,
"api_key": "hb2r82i8saloj1ectsfsi5omlq"}')
if (ams_auth_req$status_code != 200) {
return("Bad key/id")
} else {
token <- content(ams_auth_req)$token
request <- RequestAMS(token, tweets)
}
}
return(request)
}
#Get data for a user
GetData <- function(user) {
#token <- content(ams_auth_req)$token
tweets <- GetTweets(user)
resp <- RequestAMS(token, tweets)
return(content(resp))
}
#Get the shitty predictions df
GetPredDF <- function(data) {
return(as.data.frame(data$predictions))
}
#Get the shitty interpretations df
GetIntDF <- function(data) {
return(as.data.frame(data$interpretations))
}
#Get Tweets by twitter handle
GetTweets <- function(t_handle) {
t_user <- getUser(t_handle)
timeline <- userTimeline(t_user)
tweets <- c()
for (i in seq(length(timeline))) {
tweets <- c(tweets, timeline[[i]]$text)
}
return(toString(tweets))
}
GetIntDF(GetData("@realDonaldTrump"))
runApp('C:/Users/Jesse/Desktop/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/The-Meme-Team-Project')
token
runApp('C:/Users/Jesse/Desktop/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/The-Meme-Team-Project')
source('./getData.r')
library(knitr)
getJungian <- function(t_handle, interpretations){
#token_request()
# interpretations <- GetIntDF(GetData(t_handle))
####RequestAMS(token='uuj6skmeji1km2ecodfv0nsptf', GetTweets(t_handle))
personality <- as.character(interpretations[1, "value"])
personality_split <- strsplit(personality, "")[[1]]
if(identical(personality_split[1], "I")){
personality_1 <- "Introverted"
} else {
personality_1 <- "Extroverted"
}
if(identical(personality_split[2], "N")){
personality_2 <- "Intuitive"
} else {
personality_2 <- "Sensible"
}
if(identical(personality_split[3], "T")){
personality_3  <- "Thinker"
} else {
personality_3 <- "Feeler"
}
if(identical(personality_split[4], "J")){
personality_4 <- "Judger"
} else {
personality_4 <- "Perceptive"
}
Type <- c("Deductive", "Inductive")
Subjective <- c(personality_2, personality_3)
Objective <- c(personality_1, personality_4)
df <- data.frame(Type, Subjective, Objective)
rownames(df) <- df[,1]
df[,1] <- NULL
return(kable(df))
}
getJungian("@realDonaldTrump", GetIntDF(GetData("@realDonaldTrump")))
>>>>>>> 55ee0a5c1a0dff702a74c545320fe4272feaaeac
library(jsonlite)
library(dplyr)
# Store a variable "movie"
movie <- "The Sandlot"
# Write a function that allows you to specify a movie, then does the following:
GetReview <- function(this.movie) {
# Replace all of the spaces in your movie title with plus signs (+)
movie.no.space <- gsub(' ', '+', this.movie)
# Construct a search query using YOUR api key
# The base URL is https://api.nytimes.com/svc/movies/v2/reviews/search.json?
# See the interactive console for more detail:https://developer.nytimes.com/movie_reviews_v2.json#/Console/GET/reviews/search.json
base <- 'https://api.nytimes.com/svc/movies/v2/reviews/search.json?'
api.key = 'api-key=28dc72f2e9b346648054e274ce556e48&'
query <- paste0('query=', movie.no.space)
search <- paste0(base, api.key, query)
# Request data using your search query
movie_data <- fromJSON(search)
# Flatten the data stored in the `$results` key of the data returned to you
flat_movie <- flatten(movie_data$results)
# From the most recent review, store the headline, short summary, and link to full article each in their own variables
headline <- flat_movie$headline
summary <- flat_movie$summary_short
link <- flat_movie$link.url
# Return an list of the three pieces of information from above
return(list(headline, summary, link))
}
# Create a variable called `movie.info` by passing your movie to your GetReview function
movie.info <- GetReview(movie)
movie.info
# Chunk 1
### Exercise 1 ###
library(jsonlite)
library(dplyr)
# Store a variable "movie"
movie <- "The Sandlot"
# Write a function that allows you to specify a movie, then does the following:
GetReview <- function(this.movie) {
# Replace all of the spaces in your movie title with plus signs (+)
movie.no.space <- gsub(' ', '+', this.movie)
# Construct a search query using YOUR api key
# The base URL is https://api.nytimes.com/svc/movies/v2/reviews/search.json?
# See the interactive console for more detail:https://developer.nytimes.com/movie_reviews_v2.json#/Console/GET/reviews/search.json
base <- 'https://api.nytimes.com/svc/movies/v2/reviews/search.json?'
api.key = 'api-key=28dc72f2e9b346648054e274ce556e48&'
query <- paste0('query=', movie.no.space)
search <- paste0(base, api.key, query)
# Request data using your search query
movie_data <- fromJSON(search)
# Flatten the data stored in the `$results` key of the data returned to you
flat_movie <- flatten(movie_data$results)
# From the most recent review, store the headline, short summary, and link to full article each in their own variables
headline <- flat_movie$headline
summary <- flat_movie$summary_short
link <- flat_movie$link.url
# Return an list of the three pieces of information from above
return(list(headline, summary, link))
}
# Create a variable called `movie.info` by passing your movie to your GetReview function
movie.info <- GetReview(movie)
# Chunk 1
### Exercise 1 ###
library(jsonlite)
library(dplyr)
# Store a variable "movie"
movie <- "The Sandlot"
# Write a function that allows you to specify a movie, then does the following:
GetReview <- function(this.movie) {
# Replace all of the spaces in your movie title with plus signs (+)
movie.no.space <- gsub(' ', '+', this.movie)
# Construct a search query using YOUR api key
# The base URL is https://api.nytimes.com/svc/movies/v2/reviews/search.json?
# See the interactive console for more detail:https://developer.nytimes.com/movie_reviews_v2.json#/Console/GET/reviews/search.json
base <- 'https://api.nytimes.com/svc/movies/v2/reviews/search.json?'
api.key = 'api-key=28dc72f2e9b346648054e274ce556e48&'
query <- paste0('query=', movie.no.space)
search <- paste0(base, api.key, query)
# Request data using your search query
movie_data <- fromJSON(search)
# Flatten the data stored in the `$results` key of the data returned to you
flat_movie <- flatten(movie_data$results)
# From the most recent review, store the headline, short summary, and link to full article each in their own variables
headline <- flat_movie$headline
summary <- flat_movie$summary_short
link <- flat_movie$link.url
# Return an list of the three pieces of information from above
return(list(headline, summary, link))
}
# Create a variable called `movie.info` by passing your movie to your GetReview function
movie.info <- GetReview(movie)
library(jsonlite)
AMSRest <- function() {
base <- 'http://api-v2.applymagicsauce.com/auth'
auth <- fromJSON(base)
auth <- as.data.frame(auth)
View(auth)
source('~/.active-rstudio-document', echo=TRUE)
sxd
d
sc
qw
source('~/INFO201/The-Meme-Team-Project/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
auth_req
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
auth_req
install.packages('httr')
install.packages("httr")
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
auth_data
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
auth_data
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
auth_data
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
auth_post
View(auth_post)
type(auth_post)
typeof(auth_post)
auth_post[0]
auth_post[1]
auth_post$content
auth_post$handle
View(as.data.frame(auth_post))
auth_post$cookies
auth_post$status_code
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
auth_post
auth_post$all_headers
auth_post$request
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
auth_post$headers
auth_post$content
auth_post$request
auth_post
Response [http://api-v2.applymagicsauce.com/auth]
auth_post$url
auth_post$handle
auth_post$cookies
View(auth_post$cookies)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
auth_post
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
auth_cookies
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
token
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
token
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
token
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
response
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
ams_resp
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
ams_resp
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
ams_resp
ams_req
token
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
auth_response
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
token
ams_req
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
ams_resp
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
ams_resp
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
token
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
token
install.packages(c("devtools", "rjson", "bit64", "httr"))
install.packages(c("devtools", "rjson", "bit64", "httr"))
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
ams_auth_req <- POST(paste0(ams_base, "auth"),
add_headers("Content-Type"="application/json"),
body = '{"customer_id": 2557,
"api_key": "hb2r82i8saloj1ectsfsi5omlq"}'
)
ams_auth_resp <- content(ams_auth_resp)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
ams_resp
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
twitter_auth_req
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
twitter_resp
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
twitter_resp
twitter_resp$verified
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
View(twitter_resp)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
twitter_resp$lastStatus
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweet
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweet
typeof(tweet)
View(tweet)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
ams_resp
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
ams_resp
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
View(tweets)
typeof(tweets)
tweets[1]
tweets[2]
tweets[[1]]
tweets[[1]]$getText
View(tweets[[1]])
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
t_user <- getUser("@realDonaldTrump")
timeline <- userTimeline(t_user, n=20)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
timeline
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
length(timeline)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
len(timeline)
length(timeline)
###############################################################################
t_api_key <- "RIXgPEn59oOUm2qn5WBQX2sW1"
t_api_secret <- "70qPb7pp7mQCOjRPU3jP7kxhu4N91vavVupBvih08Bp3aHrkXN"
t_access_token <- "4081108513-Lj3BaXetniCt09A1uvn4U5YFZGSM1JQHiyapjfq"
t_access_token_secret <- "S1YtKDOJIXDj2ARejfFv3tbx8OmBVFUHgStiCoLBdwOGr"
setup_twitter_oauth(t_api_key,
t_api_secret,
t_access_token,
t_access_token_secret
)
#Get Tweets
t_user <- getUser("@realDonaldTrump")
timeline <- userTimeline(t_user, n=11)
for (i in range(10)) {
tweets <- c(tweets, timeline[[i]]$text)
}
#AMS
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
View(timeline)
timeline[[1]]
timeline[[2]]
timeline[[3]]
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
length(timeline[])
length[timeline]
###############################################################################
t_api_key <- "RIXgPEn59oOUm2qn5WBQX2sW1"
t_api_secret <- "70qPb7pp7mQCOjRPU3jP7kxhu4N91vavVupBvih08Bp3aHrkXN"
t_access_token <- "4081108513-Lj3BaXetniCt09A1uvn4U5YFZGSM1JQHiyapjfq"
t_access_token_secret <- "S1YtKDOJIXDj2ARejfFv3tbx8OmBVFUHgStiCoLBdwOGr"
setup_twitter_oauth(t_api_key,
t_api_secret,
t_access_token,
t_access_token_secret
)
<<<<<<< HEAD
#Get Tweets
t_user <- getUser("@realDonaldTrump")
timeline <- userTimeline(t_user, n=11)
for (i in range(length(timeline[]))) {
tweets <- c(tweets, timeline[[i]])
}
#AMS
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
timeline
View(timeline)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
timeline
View(timeline)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
timeline
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
length(timeline)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
length(timeline)
length(timeline[])
length(timeline[[]])
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets1
tweets2
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets1
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets1
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
range(length(timeline))
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets1
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets1
tweets2
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets1
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets1
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets1
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets1
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets1
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
ams_data
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
ams_data
token
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
ams_data
ams_req
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
ams_data
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/test.r', echo=TRUE)
ams_req
tweets
source('~/INFO201/The-Meme-Team-Project/scripts/getData.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/getData.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/getWordCloud.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/getWordCloud.r', echo=TRUE)
source('~/INFO201/The-Meme-Team-Project/scripts/getWordCloud.r', echo=TRUE)
shiny::runApp('INFO201/The-Meme-Team-Project')
runApp('INFO201/The-Meme-Team-Project')
source('~/INFO201/The-Meme-Team-Project/scripts/getData.r', echo=TRUE)
user$getDescription
user$setProfileImageUrl
shiny::runApp('INFO201/The-Meme-Team-Project')
source('~/INFO201/The-Meme-Team-Project/scripts/getWordCloud.r', echo=TRUE)
runApp('INFO201/The-Meme-Team-Project')
source('~/INFO201/The-Meme-Team-Project/scripts/getWordCloud.r', echo=TRUE)
runApp('INFO201/The-Meme-Team-Project')
source('~/INFO201/The-Meme-Team-Project/scripts/getWordCloud.r', echo=TRUE)
runApp('INFO201/The-Meme-Team-Project')
source('~/INFO201/The-Meme-Team-Project/scripts/getWordCloud.r', echo=TRUE)
runApp('INFO201/The-Meme-Team-Project')
source('~/INFO201/The-Meme-Team-Project/scripts/getWordCloud.r', echo=TRUE)
runApp('INFO201/The-Meme-Team-Project')
source('~/INFO201/The-Meme-Team-Project/scripts/getWordCloud.r', echo=TRUE)
runApp('INFO201/The-Meme-Team-Project')
source('~/INFO201/The-Meme-Team-Project/scripts/getWordCloud.r', echo=TRUE)
runApp('INFO201/The-Meme-Team-Project')
source('~/INFO201/The-Meme-Team-Project/scripts/getWordCloud.r', echo=TRUE)
runApp('INFO201/The-Meme-Team-Project')
runApp('INFO201/The-Meme-Team-Project')
source('~/INFO201/The-Meme-Team-Project/scripts/getWordCloud.r', echo=TRUE)
runApp('INFO201/The-Meme-Team-Project')
runApp('INFO201/The-Meme-Team-Project')
runApp('INFO201/The-Meme-Team-Project')
runApp('INFO201/The-Meme-Team-Project')
source('~/INFO201/The-Meme-Team-Project/scripts/getWordCloud.r', echo=TRUE)
runApp('INFO201/The-Meme-Team-Project')
runApp('INFO201/The-Meme-Team-Project')
=======
return(cloud)
}
getWordMap("@realDonaldTrump")
shiny::runApp('~/Desktop/The-Meme-Team-Project')
shiny::runApp()
runApp()
=======
return(kable(df))
}
getJungian("@realDonaldTrump", GetIntDF(GetData("@realDonaldTrump")))
runApp('C:/Users/Jesse/Desktop/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/The-Meme-Team-Project')
shiny::runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
shiny::runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
shiny::runApp()
runApp()
runApp()
runApp()
install.packages('DT')
library(DT)
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> added personal jung table
shiny::runApp()
runApp()
Type <- c(".","Deductive", "Inductive")
Type
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
>>>>>>> 55ee0a5c1a0dff702a74c545320fe4272feaaeac
