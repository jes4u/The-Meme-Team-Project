}
}
return(request)
}
#Get data for a user
GetData <- function(user) {
#token <- content(ams_auth_req)$token
tweets <- GetTweets(user)
resp <- RequestAMS(token, tweets)
return(content(resp))
}
#Get the shitty predictions df
GetPredDF <- function(data) {
return(as.data.frame(data$predictions))
}
#Get the shitty interpretations df
GetIntDF <- function(data) {
return(as.data.frame(data$interpretations))
}
#Get Tweets by twitter handle
GetTweets <- function(t_handle) {
t_user <- getUser(t_handle)
timeline <- userTimeline(t_user)
tweets <- c()
for (i in seq(length(timeline))) {
tweets <- c(tweets, timeline[[i]]$text)
}
return(toString(tweets))
}
setup_twitter_oauth(t_api_key,
t_api_secret,
t_access_token,
t_access_token_secret)
source('./getData.r')
library(knitr)
getJungian <- function(t_handle, interpretations){
#token_request()
# interpretations <- GetIntDF(GetData(t_handle))
####RequestAMS(token='uuj6skmeji1km2ecodfv0nsptf', GetTweets(t_handle))
personality <- as.character(interpretations[1, "value"])
personality_split <- strsplit(personality, "")[[1]]
if(identical(personality_split[1], "I")){
personality_1 <- "Introverted"
} else {
personality_1 <- "Extroverted"
}
if(identical(personality_split[2], "N")){
personality_2 <- "Intuitive"
} else {
personality_2 <- "Sensible"
}
if(identical(personality_split[3], "T")){
personality_3  <- "Thinker"
} else {
personality_3 <- "Feeler"
}
if(identical(personality_split[4], "J")){
personality_4 <- "Judger"
} else {
personality_4 <- "Perceptive"
}
Type <- c("Deductive", "Inductive")
Subjective <- c(personality_2, personality_3)
Objective <- c(personality_1, personality_4)
df <- data.frame(Type, Subjective, Objective)
rownames(df) <- df[,1]
df[,1] <- NULL
return(kable(df))
}
getJungian("@realDonaldTrump", GetIntDF(GetData("@realDonaldTrump")))
token <- content(ams_auth_req)$token
library(jsonlite)
library(dplyr)
library(shiny)
library(httr)
library(devtools)
library(twitteR)
########################################################################################################## In server
#Twitter#######################################################################
##Remove when finished###
t_api_key <- "RIXgPEn59oOUm2qn5WBQX2sW1"
t_api_secret <- "70qPb7pp7mQCOjRPU3jP7kxhu4N91vavVupBvih08Bp3aHrkXN"
t_access_token <- "4081108513-Lj3BaXetniCt09A1uvn4U5YFZGSM1JQHiyapjfq"
t_access_token_secret <- "S1YtKDOJIXDj2ARejfFv3tbx8OmBVFUHgStiCoLBdwOGr"
########### Comment out
setup_twitter_oauth(t_api_key,
t_api_secret,
t_access_token,
t_access_token_secret)
library(jsonlite)
library(dplyr)
library(shiny)
library(httr)
library(devtools)
library(twitteR)
########################################################################################################## In server
#Twitter#######################################################################
##Remove when finished###
t_api_key <- "RIXgPEn59oOUm2qn5WBQX2sW1"
t_api_secret <- "70qPb7pp7mQCOjRPU3jP7kxhu4N91vavVupBvih08Bp3aHrkXN"
t_access_token <- "4081108513-Lj3BaXetniCt09A1uvn4U5YFZGSM1JQHiyapjfq"
t_access_token_secret <- "S1YtKDOJIXDj2ARejfFv3tbx8OmBVFUHgStiCoLBdwOGr"
########### Comment out
# setup_twitter_oauth(t_api_key,
#                     t_api_secret,
#                     t_access_token,
#                     t_access_token_secret)
#AMS###########################################################################
###Remove when finished###
ams_base <- "http://api-v2.applymagicsauce.com/"
ams_customer_id <- '2557'
ams_api_key <- 'hb2r82i8saloj1ectsfsi5omlq'
#Initial Auth
ams_auth_req <- POST(paste0(ams_base, "auth"),
add_headers("Content-Type"="application/json"),
body = '{"customer_id": 2557,
"api_key": "hb2r82i8saloj1ectsfsi5omlq"}')
if (ams_auth_req$status_code != 200) {
print("Bad key/id")
}
#################################################################################################### In server
# request_token
token <- content(ams_auth_req)$token
#Sends POST request to AMS
#Handles token regenation
#Takes auth token and concatenated tweets for a user as parameters
RequestAMS <- function(token='s7dqd3l9t7a7efuig6b020svdd', tweets) {
request <- POST(paste0(ams_base, "text?", "source=TWEET", "&interpretations=true"),
add_headers("X-Auth-Token"=token,
"Content-type"="application/json"),
body=tweets)
if (request$status_code == 403) {
###Redundant, find more elegant solution###
ams_auth_req <- POST(paste0(ams_base, "auth"),
add_headers("Content-Type"="application/json"),
body = '{"customer_id": 2557,
"api_key": "hb2r82i8saloj1ectsfsi5omlq"}')
if (ams_auth_req$status_code != 200) {
return("Bad key/id")
} else {
token <- content(ams_auth_req)$token
request <- RequestAMS(token, tweets)
}
}
return(request)
}
#Get data for a user
GetData <- function(user) {
#token <- content(ams_auth_req)$token
tweets <- GetTweets(user)
resp <- RequestAMS(token, tweets)
return(content(resp))
}
#Get the shitty predictions df
GetPredDF <- function(data) {
return(as.data.frame(data$predictions))
}
#Get the shitty interpretations df
GetIntDF <- function(data) {
return(as.data.frame(data$interpretations))
}
#Get Tweets by twitter handle
GetTweets <- function(t_handle) {
t_user <- getUser(t_handle)
timeline <- userTimeline(t_user)
tweets <- c()
for (i in seq(length(timeline))) {
tweets <- c(tweets, timeline[[i]]$text)
}
return(toString(tweets))
}
source('./getData.r')
library(knitr)
getJungian <- function(t_handle, interpretations){
#token_request()
# interpretations <- GetIntDF(GetData(t_handle))
####RequestAMS(token='uuj6skmeji1km2ecodfv0nsptf', GetTweets(t_handle))
personality <- as.character(interpretations[1, "value"])
personality_split <- strsplit(personality, "")[[1]]
if(identical(personality_split[1], "I")){
personality_1 <- "Introverted"
} else {
personality_1 <- "Extroverted"
}
if(identical(personality_split[2], "N")){
personality_2 <- "Intuitive"
} else {
personality_2 <- "Sensible"
}
if(identical(personality_split[3], "T")){
personality_3  <- "Thinker"
} else {
personality_3 <- "Feeler"
}
if(identical(personality_split[4], "J")){
personality_4 <- "Judger"
} else {
personality_4 <- "Perceptive"
}
Type <- c("Deductive", "Inductive")
Subjective <- c(personality_2, personality_3)
Objective <- c(personality_1, personality_4)
df <- data.frame(Type, Subjective, Objective)
rownames(df) <- df[,1]
df[,1] <- NULL
return(kable(df))
}
getJungian("@realDonaldTrump", GetIntDF(GetData("@realDonaldTrump")))
runApp('C:/Users/Jesse/Desktop/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/The-Meme-Team-Project')
shiny::runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
shiny::runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
shiny::runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
Types <- c("INFP", "ENFP", "INFJ", "ENFJ", "INTJ", "ENTJ", "INTP", "ENTP", "ISFP", "ESFP", "ISTP", "ESTP", "ISFJ", "ESFJ", "ISTJ", "ESTJ")
Types
INFP <- c("Good", "Good", "Good", "Perfect", "Good", "Perfect", "Good", "Good", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad")
Types <- c("INFP", "ENFP", "INFJ", "ENFJ", "INTJ", "ENTJ", "INTP", "ENTP", "ISFP", "ESFP", "ISTP", "ESTP", "ISFJ", "ESFJ", "ISTJ", "ESTJ")
INFP <- c("Good", "Good", "Good", "Perfect", "Good", "Perfect", "Good", "Good", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad")
ENFP <- c("Good", "Good", "Perfect", "Good", "Perfect", "Good", "Good", "Good", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad")
INFJ <- c("Good", "Perfect", "Good", "Good", "Good", "Good", "Good", "Perfect", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad")
ENFJ <- c("Perfect", "Good", "Good", "Good", "Good", "Good", "Good", "Good", "Perfect", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad")
INTJ <- c("Good", "Prefect", "Good", "Good", "Good", "Good", "Good", "Perfect", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "Possible", "Possible", "Possible", "Possible")
ENTJ <- c("Perfect", "Good", "Good", "Good", "Good", "Good", "Perfect", "Good", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "One-Sided")
INTP <- c("Good", "Good", "Good", "Good", "Good", "Perfect", "Good", "Good", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "Possible", "Possible", "Possible", "Perfect")
ENTP <- c("Good", "Good", "Perfect", "Good", "Perfect", "Good", "Good", "Good", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "Possible", "Possible", "Possible", "Possible")
ISFP <- c("Bad", "Bad", "Bad", "Perfect", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "Possible", "Possible", "Possible", "Possible", "One-Sided", "Perfect", "One-Sided", "Perfect")
ESFP <- c("Bad", "Bad", "Bad", "Bad", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "Possible", "Possible", "Possible", "Possible", "Perfect", "One-Sided", "Perfect", "One-Sided")
ISTP <- c("Bad", "Bad", "Bad", "Perfect", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "Possible", "Possible", "Possible", "Possible", "One-Sided", "Perfect", "One-Sided", "Perfect")
ESTP <- c("Bad", "Bad", "Bad", "Bad", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "Possible", "Possible", "Possible", "Possible", "Perfect", "One-Sided", "Perfect", "One-Sided")
ISFJ <- c("Bad", "Bad", "Bad", "Bad", "Possible", "One-Sided", "Possible", "Possible", "One-Sided", "Perfect", "One-Sided", "Perfect", "Good", "Good", "Good", "Good")
ESFJ <- c("Bad", "Bad", "Bad", "Bad", "Possible", "One-Sided", "Possible", "Possible", "Perfect", "One-Sided", "Perfect", "One-Sided", "Good", "Good", "Good", "Good")
ISTJ <- c("Bad", "Bad", "Bad", "Bad", "Possible", "One-Sided", "Possible", "Possible", "One-Sided", "Perfect", "One-Sided", "Perfect", "Good", "Good", "Good", "Good")
ESTJ <- c("Bad", "Bad", "Bad", "Bad", "Possible", "One-Sided", "Perfect", "Possible", "Perfect", "One-Sided", "Perfect", "One-Sided", "Good", "Good", "Good", "Good")
df <- data.frame(Types, INFP, ENFP, INFJ, ENFJ, INTJ, ENTJ, INTP, ENTP, ISFP, ESFP, ISTP, ESTP, ISFJ, ESFJ, ISTJ, ESTJ)
View(df)
View(df)
df <- getCompatabilityTable
df <- getCompatabilityTable()
df
df["INFP","ENFJ"]
View(df)
View(df)
Types <- c("INFP", "ENFP", "INFJ", "ENFJ", "INTJ", "ENTJ", "INTP", "ENTP", "ISFP", "ESFP", "ISTP", "ESTP", "ISFJ", "ESFJ", "ISTJ", "ESTJ")
INFP <- c("Good", "Good", "Good", "Perfect", "Good", "Perfect", "Good", "Good", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad")
ENFP <- c("Good", "Good", "Perfect", "Good", "Perfect", "Good", "Good", "Good", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad")
INFJ <- c("Good", "Perfect", "Good", "Good", "Good", "Good", "Good", "Perfect", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad")
ENFJ <- c("Perfect", "Good", "Good", "Good", "Good", "Good", "Good", "Good", "Perfect", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad", "Bad")
INTJ <- c("Good", "Prefect", "Good", "Good", "Good", "Good", "Good", "Perfect", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "Possible", "Possible", "Possible", "Possible")
ENTJ <- c("Perfect", "Good", "Good", "Good", "Good", "Good", "Perfect", "Good", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "One-Sided")
INTP <- c("Good", "Good", "Good", "Good", "Good", "Perfect", "Good", "Good", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "Possible", "Possible", "Possible", "Perfect")
ENTP <- c("Good", "Good", "Perfect", "Good", "Perfect", "Good", "Good", "Good", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "Possible", "Possible", "Possible", "Possible")
ISFP <- c("Bad", "Bad", "Bad", "Perfect", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "Possible", "Possible", "Possible", "Possible", "One-Sided", "Perfect", "One-Sided", "Perfect")
ESFP <- c("Bad", "Bad", "Bad", "Bad", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "Possible", "Possible", "Possible", "Possible", "Perfect", "One-Sided", "Perfect", "One-Sided")
ISTP <- c("Bad", "Bad", "Bad", "Perfect", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "Possible", "Possible", "Possible", "Possible", "One-Sided", "Perfect", "One-Sided", "Perfect")
ESTP <- c("Bad", "Bad", "Bad", "Bad", "One-Sided", "One-Sided", "One-Sided", "One-Sided", "Possible", "Possible", "Possible", "Possible", "Perfect", "One-Sided", "Perfect", "One-Sided")
ISFJ <- c("Bad", "Bad", "Bad", "Bad", "Possible", "One-Sided", "Possible", "Possible", "One-Sided", "Perfect", "One-Sided", "Perfect", "Good", "Good", "Good", "Good")
ESFJ <- c("Bad", "Bad", "Bad", "Bad", "Possible", "One-Sided", "Possible", "Possible", "Perfect", "One-Sided", "Perfect", "One-Sided", "Good", "Good", "Good", "Good")
ISTJ <- c("Bad", "Bad", "Bad", "Bad", "Possible", "One-Sided", "Possible", "Possible", "One-Sided", "Perfect", "One-Sided", "Perfect", "Good", "Good", "Good", "Good")
ESTJ <- c("Bad", "Bad", "Bad", "Bad", "Possible", "One-Sided", "Perfect", "Possible", "Perfect", "One-Sided", "Perfect", "One-Sided", "Good", "Good", "Good", "Good")
df <- data.frame(Types, INFP, ENFP, INFJ, ENFJ, INTJ, ENTJ, INTP, ENTP, ISFP, ESFP, ISTP, ESTP, ISFJ, ESFJ, ISTJ, ESTJ)
rownames(df) <- df[,1]
df[,1] <- NULL
View(df)
View(df)
df["INFP","ENFJ"]
df[["INFP","ENFJ"]]
a <- as.character(df["INFP", "ENFJ"])
a
shiny::runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
shiny::runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
shiny::runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
shiny::runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
ams_customer_id <- '2557'
ams_api_key <- 'hb2r82i8saloj1ectsfsi5omlq'
#Initial Auth
ams_auth_req <- POST("http://api-v2.applymagicsauce.com/auth/",
add_headers("Content-Type"="application/json"),
body = '{"customer_id": 2557,
"api_key": "hb2r82i8saloj1ectsfsi5omlq"}')
token <- httr::content(ams_auth_req)$token
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
ams_customer_id <- '2557'
ams_api_key <- 'hb2r82i8saloj1ectsfsi5omlq'
#Initial Auth
ams_auth_req <- POST("http://api-v2.applymagicsauce.com/auth/",
add_headers("Content-Type"="application/json"),
body = '{"customer_id": 2557,
"api_key": "hb2r82i8saloj1ectsfsi5omlq"}')
token <- httr::content(ams_auth_req)$token
ams_auth_req$status_code
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
library(jsonlite)
library(dplyr)
library(shiny)
library(httr)
library(devtools)
library(twitteR)
########################################################################################################## In server
#Twitter#######################################################################
##Remove when finished###
t_api_key <- "RIXgPEn59oOUm2qn5WBQX2sW1"
t_api_secret <- "70qPb7pp7mQCOjRPU3jP7kxhu4N91vavVupBvih08Bp3aHrkXN"
t_access_token <- "4081108513-Lj3BaXetniCt09A1uvn4U5YFZGSM1JQHiyapjfq"
t_access_token_secret <- "S1YtKDOJIXDj2ARejfFv3tbx8OmBVFUHgStiCoLBdwOGr"
# ########### Comment out
setup_twitter_oauth(t_api_key,
t_api_secret,
t_access_token,
t_access_token_secret)
#
# #AMS###########################################################################
#
###Remove when finished###
ams_base <- "http://api-v2.applymagicsauce.com/"
ams_customer_id <- '2557'
ams_api_key <- 'hb2r82i8saloj1ectsfsi5omlq'
#Initial Auth
ams_auth_req <- POST(paste0(ams_base, "auth"),
add_headers("Content-Type"="application/json"),
body = '{"customer_id": 2557,
"api_key": "hb2r82i8saloj1ectsfsi5omlq"}')
if (ams_auth_req$status_code != 200) {
print("Bad key/id")
}
##################################################################################################### In server
# request_token
#token <- content(ams_auth_req)$token
#Sends POST request to AMS
#Handles token regenation
#Takes auth token and concatenated tweets for a user as parameters
RequestAMS <- function(token='uuj6skmeji1km2ecodfv0nsptf', tweets) {
request <- POST(paste0(ams_base, "text?", "source=TWEET", "&interpretations=true"),
add_headers("X-Auth-Token"=token,
"Content-type"="application/json"),
body=tweets)
if (request$status_code == 403) {
###Redundant, find more elegant solution###
ams_auth_req <- POST(paste0(ams_base, "auth"),
add_headers("Content-Type"="application/json"),
body = '{"customer_id": 2557,
"api_key": "hb2r82i8saloj1ectsfsi5omlq"}')
if (ams_auth_req$status_code != 200) {
return("Bad key/id")
} else {
token <- content(ams_auth_req)$token
request <- RequestAMS(token, tweets)
}
}
return(request)
}
#Get data for a user
GetData <- function(user) {
tweets <- GetTweets(user)
resp <- RequestAMS(token, tweets)
return(content(resp))
}
#Get the shitty predictions df
GetPredDF <- function(data) {
return(as.data.frame(data$predictions))
}
#Get the shitty interpretations df
GetIntDF <- function(data) {
return(as.data.frame(data$interpretations))
}
#Get Tweets by twitter handle
GetTweets <- function(t_handle) {
t_user <- getUser(t_handle)
timeline <- userTimeline(t_user)
tweets <- c()
for (i in seq(length(timeline))) {
tweets <- c(tweets, timeline[[i]]$text)
}
return(toString(tweets))
}
source('./getData.r')
library(knitr)
getJungian <- function(t_handle, interpretations){
#token_request()
# interpretations <- GetIntDF(GetData(t_handle))
####RequestAMS(token='uuj6skmeji1km2ecodfv0nsptf', GetTweets(t_handle))
personality <- as.character(interpretations[1, "value"])
personality_split <- strsplit(personality, "")[[1]]
if(identical(personality_split[1], "I")){
personality_1 <- "Introverted"
} else {
personality_1 <- "Extroverted"
}
if(identical(personality_split[2], "N")){
personality_2 <- "Intuitive"
} else {
personality_2 <- "Sensible"
}
if(identical(personality_split[3], "T")){
personality_3  <- "Thinker"
} else {
personality_3 <- "Feeler"
}
if(identical(personality_split[4], "J")){
personality_4 <- "Judger"
} else {
personality_4 <- "Perceptive"
}
Type <- c("Deductive", "Inductive")
Subjective <- c(personality_2, personality_3)
Objective <- c(personality_1, personality_4)
df <- data.frame(Type, Subjective, Objective)
rownames(df) <- df[,1]
df[,1] <- NULL
return(kable(df))
}
getJungian("@realDonaldTrump", GetIntDF(GetData(t_handle))
getJungian("@realDonaldTrump", GetIntDF(GetData(t_handle))
source('./getData.r')
library(knitr)
getJungian <- function(t_handle, interpretations){
#token_request()
# interpretations <- GetIntDF(GetData(t_handle))
####RequestAMS(token='uuj6skmeji1km2ecodfv0nsptf', GetTweets(t_handle))
personality <- as.character(interpretations[1, "value"])
personality_split <- strsplit(personality, "")[[1]]
if(identical(personality_split[1], "I")){
personality_1 <- "Introverted"
} else {
personality_1 <- "Extroverted"
}
if(identical(personality_split[2], "N")){
personality_2 <- "Intuitive"
} else {
personality_2 <- "Sensible"
}
if(identical(personality_split[3], "T")){
personality_3  <- "Thinker"
} else {
personality_3 <- "Feeler"
}
if(identical(personality_split[4], "J")){
personality_4 <- "Judger"
} else {
personality_4 <- "Perceptive"
}
Type <- c("Deductive", "Inductive")
Subjective <- c(personality_2, personality_3)
Objective <- c(personality_1, personality_4)
df <- data.frame(Type, Subjective, Objective)
rownames(df) <- df[,1]
df[,1] <- NULL
return(kable(df))
}
getJungian("@realDonaldTrump", GetIntDF(GetData(t_handle))
source('./getData.R')
library(knitr)
getJungian <- function(t_handle, interpretations){
#token_request()
# interpretations <- GetIntDF(GetData(t_handle))
####RequestAMS(token='uuj6skmeji1km2ecodfv0nsptf', GetTweets(t_handle))
personality <- as.character(interpretations[1, "value"])
personality_split <- strsplit(personality, "")[[1]]
if(identical(personality_split[1], "I")){
personality_1 <- "Introverted"
} else {
personality_1 <- "Extroverted"
}
if(identical(personality_split[2], "N")){
personality_2 <- "Intuitive"
} else {
personality_2 <- "Sensible"
}
if(identical(personality_split[3], "T")){
personality_3  <- "Thinker"
} else {
personality_3 <- "Feeler"
}
if(identical(personality_split[4], "J")){
personality_4 <- "Judger"
} else {
personality_4 <- "Perceptive"
}
Type <- c("Deductive", "Inductive")
Subjective <- c(personality_2, personality_3)
Objective <- c(personality_1, personality_4)
df <- data.frame(Type, Subjective, Objective)
rownames(df) <- df[,1]
df[,1] <- NULL
return(kable(df))
}
getJungian("@realDonaldTrump", GetIntDF(GetData(t_handle))
a <- getJungian("@realDonaldTrump", GetIntDF(GetData(t_handle))
a <- getJungian("@realDonaldTrump", GetIntDF(GetData(t_handle)))
a <- getJungian("@realDonaldTrump", GetIntDF(GetData("@realDonaldTrump")))
shiny::runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
runApp('C:/Users/Jesse/Desktop/AUT16/INFO 201/Project/The-Meme-Team-Project')
